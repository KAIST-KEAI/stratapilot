{
    "view_cpu_usage": {
        "code": "import os\nfrom jarvis.action.base_action import BaseAction\nimport subprocess\n\nclass view_cpu_usage(BaseAction):\n    def __init__(self):\n        self._description = \"Open the terminal interface and view the system's CPU usage.\"\n\n    def __call__(self, working_directory=None, *args, **kwargs):\n        \"\"\"\n        Open the terminal interface and view the system's CPU usage.\n\n        Args:\n        working_directory (str): The working directory where the terminal will be opened.\n        \n        Returns:\n        None\n        \"\"\"\n        # Check if working_directory is provided, if not, use the current working directory\n        if working_directory:\n            # Change the current working directory to the provided working_directory\n            os.chdir(working_directory)\n        \n        # Open the terminal and call relevant instructions to view the system's CPU usage\n        subprocess.run([\"gnome-terminal\", \"--\", \"top\"])\n",
        "description": "Open the terminal interface and view the system's CPU usage."
    },
    "create_folder": {
        "code": "from jarvis.action.base_action import BaseAction\nimport os\n\nclass create_folder(BaseAction):\n    def __init__(self):\n        self._description = \"Create a folder under the default working directory.\"\n\n    def __call__(self, working_directory=None, folder_name='myfold', *args, **kwargs):\n        \"\"\"\n        Create a folder under the specified working directory or the default working directory.\n\n        Args:\n        working_directory (str): The path of the working directory. If not provided, the default working directory will be used.\n        folder_name (str): The name of the folder to be created. Default is 'myfold'.\n\n        Returns:\n        None\n        \"\"\"\n        # Check if the working_directory is provided, if not, use the default working directory\n        if working_directory:\n            os.chdir(working_directory)\n\n        # Create the folder\n        os.makedirs(folder_name)\n\n# Example of how to use the class\n# create_folder_action = create_folder()\n# create_folder_action(working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir', folder_name='my_new_folder')\n",
        "description": "Create a folder under the default working directory."
    },
    "install_package": {
        "code": "from jarvis.action.base_action import BaseAction\nimport subprocess\nimport sys\n\n\nclass install_package(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"install environment missing package.\"\n        self.action_type = 'BASH'\n\n    def __call__(self, package: str, *args, **kwargs):\n\n        \"\"\"\n        Install a Python package using pip.\n\n        Args:\n        package_name (str): Name of the package to install.\n        \"\"\"\n        try:\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n            print(f\"Package '{package}' installed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install package '{package}'. Error: {e}\")\n        \n        # try:\n        #     # \u68c0\u67e5pip\u662f\u5426\u5df2\u5b89\u88c5\n        #     print(\"check pip ...\")\n        #     subprocess.check_call([sys.executable, '-m', 'pip', '--version'])\n        # except subprocess.CalledProcessError:\n        #     # \u5b89\u88c5pip\n        #     print(\"Installing pip...\")\n        #     subprocess.check_call([sys.executable, '-m', 'ensurepip'])\n\n        # # \u5b89\u88c5\u6307\u5b9a\u7684\u5305\n        # try:\n        #     print(f\"Installing {package}...\")\n        #     subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n        #     print(f\"{package} installed successfully.\")\n        # except subprocess.CalledProcessError:\n        #     print(f\"Failed to install {package}.\")        \n\n",
        "description": "install environment missing package."
    },
    "zip_files": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport os\nimport zipfile\nfrom pathlib import Path\n\nclass zip_files(BaseAction):\n    def __init__(self):\n        self._description = \"Zip all the files in a specified folder and name the zip file with a specified filename.\"\n\n    def __call__(self, folder_path, zip_name, working_directory=None):\n        \"\"\"\n        Create a zip archive of all files in the specified folder.\n\n        Args:\n            folder_path (str): The path to the folder whose files are to be zipped.\n            zip_name (str): The name of the resulting zip file.\n            working_directory (str, optional): The working directory where the folder is located. \n                If not provided, the current working directory is used.\n\n        Returns:\n            None: This method performs a task and does not return a value.\n        \"\"\"\n        # Use the provided working directory or the current working directory if not provided\n        working_directory = working_directory or os.getcwd()\n        \n        # Change the current working directory to the specified path\n        os.chdir(working_directory)\n        \n        # Ensure the folder path is a Path object for compatibility\n        folder_path = Path(folder_path)\n        \n        # Construct the full path for the zip file\n        zip_file_path = folder_path.parent / f\"{zip_name}.zip\"\n        \n        # Create a zip file and add all files from the specified folder\n        with zipfile.ZipFile(zip_file_path, 'w') as zipf:\n            for file in folder_path.glob('*'):\n                if file.is_file():\n                    zipf.write(file, arcname=file.name)\n        \n        print(f\"Task completed: '{zip_file_path}' has been created with all files from '{folder_path}'.\")\n\n# Example of how to use the class (this should be in comments):\n# To use this class, you would do something like the following:\n# zipper = zip_files()\n# zipper(folder_path='document', zip_name='agent', working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir')\n",
        "description": "Zip all the files in a specified folder and name the zip file with a specified filename."
    },
    "unzip_files": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport os\nimport zipfile\nimport subprocess\n\nclass unzip_files(BaseAction):\n    def __init__(self):\n        self._description = \"Unzip a specified .zip file into a designated folder.\"\n\n    def __call__(self, zip_file_path, destination_folder, working_directory=None, *args, **kwargs):\n        \"\"\"\n        Unzip the specified .zip file into the designated folder.\n\n        Args:\n            zip_file_path (str): The path to the .zip file to be unzipped.\n            destination_folder (str): The folder where the .zip file contents will be extracted.\n            working_directory (str, optional): The working directory where the operation will be performed.\n                If not provided, the current working directory will be used.\n\n        Returns:\n            None\n        \"\"\"\n        # If a working directory is provided, change to that directory\n        if working_directory:\n            os.chdir(working_directory)\n        else:\n            # Use the current working directory if none is provided\n            working_directory = os.getcwd()\n\n        # Ensure the destination folder exists\n        destination_path = os.path.join(working_directory, destination_folder)\n        os.makedirs(destination_path, exist_ok=True)\n\n        # Unzip the file\n        try:\n            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n                zip_ref.extractall(destination_path)\n            print(f\"Unzipped {zip_file_path} into {destination_folder} successfully.\")\n        except zipfile.BadZipFile:\n            print(f\"Failed to unzip {zip_file_path}: The file may be corrupted or not a zip file.\")\n        except FileNotFoundError:\n            print(f\"Failed to unzip {zip_file_path}: The file does not exist.\")\n\n# Example of how to use the class (this should be in the comments and not executed):\n# unzipper = unzip_files()\n# unzipper(zip_file_path='agent.zip', destination_folder='myfold', working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir')\n",
        "description": "Unzip a specified .zip file into a designated folder."
    },
    "search_word": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport os\n\nclass search_word(BaseAction):\n    def __init__(self):\n        self._description = \"Search each text file for a specified word and return the paths of files that contain the word.\"\n\n    def __call__(self, file_paths, search_term, *args, **kwargs):\n        \"\"\"\n        Search each text file in the provided list for the specified word and return the paths of files that contain the word.\n\n        Args:\n            file_paths (list): List of absolute paths to text files to be searched.\n            search_term (str): The word to search for within the text files.\n\n        Returns:\n            list: The paths of files that contain the search term.\n        \"\"\"\n        matching_files = []\n        for file_path in file_paths:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    if search_term in file.read():\n                        matching_files.append(file_path)\n            except FileNotFoundError:\n                print(f\"The file {file_path} does not exist.\")\n            except Exception as e:\n                print(f\"An error occurred while searching the file {file_path}: {e}\")\n\n        print(f\"Task execution complete. Found {len(matching_files)} files containing the word '{search_term}'.\")\n        return matching_files\n\n# Example of how to use the class (this should be in the comments):\n# searcher = search_word()\n# result = searcher(file_paths=['/path/to/file1.txt', '/path/to/file2.txt'], search_term='agent')\n",
        "description": "Search each text file for a specified word and return the paths of files that contain the word."
    },
    "download_image": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport requests\nimport os\n\nclass download_image(BaseAction):\n    def __init__(self):\n        self._description = \"Download an image from a provided URL to the local system.\"\n\n    def __call__(self, image_url, image_name, save_directory, *args, **kwargs):\n        \"\"\"\n        Download the image from the specified URL and save it to the given directory with the provided image name.\n\n        Args:\n            image_url (str): The URL of the image to be downloaded.\n            image_name (str): The name to save the image as.\n            save_directory (str): The directory where the image will be saved.\n            \n        Returns:\n            str: The absolute path to the downloaded image.\n        \"\"\"\n        # Ensure the save directory exists\n        if not os.path.exists(save_directory):\n            os.makedirs(save_directory)\n        \n        # If the image name does not contain an extension, add '.jpg'\n        if not image_name.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n            image_name += '.jpg'\n        \n        # Construct the full path for the image\n        image_path = os.path.join(save_directory, image_name)\n        \n        # Download the image\n        try:\n            response = requests.get(image_url)\n            response.raise_for_status()  # Raise an HTTPError if the HTTP request returned an unsuccessful status code\n            \n            # Write the image to a file\n            with open(image_path, 'wb') as f:\n                f.write(response.content)\n            print(f\"Image downloaded successfully and saved as {image_path}.\")\n            \n            return image_path\n        except requests.exceptions.RequestException as e:\n            print(f\"An error occurred while downloading the image: {e}\")\n            return None\n\n# Example of how to use the class (this should be in the comments and not executed):\n# downloader = download_image()\n# image_path = downloader(image_url='https://example.com/image.jpg', image_name='downloaded_image', save_directory='/path/to/save')\n",
        "description": "Download an image from a provided URL to the local system."
    },
    "access_document": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport os\n\nclass access_document(BaseAction):\n    def __init__(self):\n        self._description = \"Access the document located at the specified file path.\"\n\n    def __call__(self, file_path, *args, **kwargs):\n        \"\"\"\n        Access the document at the given file path and return its content if it's a file.\n\n        Args:\n            file_path (str): The absolute path to the document to be accessed.\n\n        Returns:\n            str: The content of the document if it's a file, or None if it's not a file.\n        \"\"\"\n        try:\n            if os.path.isfile(file_path):\n                try:\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        content = file.read()\n                except UnicodeDecodeError:\n                    with open(file_path, 'rb') as file:\n                        content = file.read()\n                print(f\"Document accessed successfully at {file_path}.\")\n                return content\n            else:\n                print(f\"The path {file_path} is not a file.\")\n                return None\n        except FileNotFoundError:\n            print(f\"The file at {file_path} does not exist.\")\n            return None\n        except Exception as e:\n            print(f\"An error occurred while accessing the file at {file_path}: {e}\")\n            return None\n",
        "description": "Access the document located at the specified file path."
    }
}