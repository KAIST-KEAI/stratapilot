{
    "view_cpu_usage": {
        "code": "import os\nfrom jarvis.action.base_action import BaseAction\nimport subprocess\n\nclass view_cpu_usage(BaseAction):\n    def __init__(self):\n        self._description = \"Open the terminal interface and view the system's CPU usage.\"\n\n    def __call__(self, working_directory=None, *args, **kwargs):\n        \"\"\"\n        Open the terminal interface and view the system's CPU usage.\n\n        Args:\n        working_directory (str): The working directory where the terminal will be opened.\n        \n        Returns:\n        None\n        \"\"\"\n        # Check if working_directory is provided, if not, use the current working directory\n        if working_directory:\n            # Change the current working directory to the provided working_directory\n            os.chdir(working_directory)\n        \n        # Open the terminal and call relevant instructions to view the system's CPU usage\n        subprocess.run([\"gnome-terminal\", \"--\", \"top\"])\n",
        "description": "Open the terminal interface and view the system's CPU usage."
    },
    "create_folder": {
        "code": "from jarvis.action.base_action import BaseAction\nimport os\n\nclass create_folder(BaseAction):\n    def __init__(self):\n        self._description = \"Create a folder under the default working directory.\"\n\n    def __call__(self, working_directory=None, folder_name='myfold', *args, **kwargs):\n        \"\"\"\n        Create a folder under the specified working directory or the default working directory.\n\n        Args:\n        working_directory (str): The path of the working directory. If not provided, the default working directory will be used.\n        folder_name (str): The name of the folder to be created. Default is 'myfold'.\n\n        Returns:\n        None\n        \"\"\"\n        # Check if the working_directory is provided, if not, use the default working directory\n        if working_directory:\n            os.chdir(working_directory)\n\n        # Create the folder\n        os.makedirs(folder_name)\n\n# Example of how to use the class\n# create_folder_action = create_folder()\n# create_folder_action(working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir', folder_name='my_new_folder')\n",
        "description": "Create a folder under the default working directory."
    },
    "open_text_file": {
        "code": "from jarvis.action.base_action import BaseAction\nimport subprocess\nimport os\n\nclass open_text_file(BaseAction):\n    def __init__(self):\n        self._description = \"Open the specified text file in the specified folder using the default text viewer on Ubuntu.\"\n\n    def __call__(self, folder_name, file_name, working_directory=None):\n        \"\"\"\n        Open the specified text file in the specified folder using the default text viewer on Ubuntu.\n\n        Args:\n        folder_name (str): The name of the folder containing the text file.\n        file_name (str): The name of the text file to be opened.\n        working_directory (str, optional): The working directory where the folder is located. If not provided, the current working directory will be used.\n\n        Returns:\n        None\n        \"\"\"\n        # If the working directory is provided, use it. Otherwise, use the current working directory.\n        if working_directory:\n            os.chdir(working_directory)\n\n        # Construct the file path\n        file_path = os.path.join(folder_name, file_name)\n\n        # Open the text file using the default text viewer on Ubuntu\n        subprocess.run(['xdg-open', file_path])\n\n# Example of how to use the class:\n# open_file_task = open_text_file()\n# open_file_task(folder_name='myfold', file_name='result.txt', working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir')\n",
        "description": "Open the specified text file in the specified folder using the default text viewer on Ubuntu."
    },
    "install_package": {
        "code": "from jarvis.action.base_action import BaseAction\nimport subprocess\nimport sys\n\n\nclass install_package(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"install environment missing package.\"\n        self.action_type = 'BASH'\n\n    def __call__(self, package: str, *args, **kwargs):\n\n        \"\"\"\n        Install a Python package using pip.\n\n        Args:\n        package_name (str): Name of the package to install.\n        \"\"\"\n        try:\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n            print(f\"Package '{package}' installed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install package '{package}'. Error: {e}\")\n        \n        # try:\n        #     # \u68c0\u67e5pip\u662f\u5426\u5df2\u5b89\u88c5\n        #     print(\"check pip ...\")\n        #     subprocess.check_call([sys.executable, '-m', 'pip', '--version'])\n        # except subprocess.CalledProcessError:\n        #     # \u5b89\u88c5pip\n        #     print(\"Installing pip...\")\n        #     subprocess.check_call([sys.executable, '-m', 'ensurepip'])\n\n        # # \u5b89\u88c5\u6307\u5b9a\u7684\u5305\n        # try:\n        #     print(f\"Installing {package}...\")\n        #     subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n        #     print(f\"{package} installed successfully.\")\n        # except subprocess.CalledProcessError:\n        #     print(f\"Failed to install {package}.\")        \n\n",
        "description": "install environment missing package."
    }
}