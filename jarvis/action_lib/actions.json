{
    "unzip_files": {
        "code": "from jarvis.action.base_action import BaseAction\nimport os\nimport zipfile\n\nclass unzip_files(BaseAction):\n    def __init__(self):\n        self._description = \"Unzip test2.zip in the folder called test2 to the folder called test.\"\n\n    def __call__(self, *args, **kwargs):\n        # Get the working directory from the user-provided information\n        working_dir = \"/home/heroding/\u684c\u9762/Jarvis/working_dir\"\n\n        # Change the current working directory to the specified working directory\n        os.chdir(working_dir)\n\n        # Define the source zip file and the destination folder\n        source_zip = \"test2/test2.zip\"\n        destination_folder = \"test\"\n\n        # Unzip the files\n        with zipfile.ZipFile(source_zip, 'r') as zip_ref:\n            zip_ref.extractall(destination_folder)\n\n# Example of how to use the class:\n# unzip_task = unzip_files()\n# unzip_task()\n",
        "description": "Unzip test2.zip in the folder called test2 to the folder called test."
    },
    "turn_on_dark_mode": {
        "code": "from jarvis.action.base_action import BaseAction\n\n\nclass turn_on_dark_mode(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"Using turn_on_dark_mode() will change your system into the dark mode.\"\n        self.action_type = 'BASH'\n\n    def __call__(self, *args, **kwargs):\n        return 'shortcuts run \"Dark Mode\"'\n\n    # @property\n    # def _command(self):\n    #     return 'shortcuts run \"Dark Mode\"'\n        # return self._python(\n        #     self._import(\"atom\", \"operations\"),\n        #     \"adjust_theme('Adwaita-dark')\"\n        # )\n\n    # def _success(self):\n    #     return \"Successfully turned the system into the Dark Mode\"\n\n    # def __call__(self, *args, **kwargs):\n    #\n    #     command = 'shortcuts run \"Dark Mode\"'\n    #     try:\n    #         # result = subprocess.run([command, \"Dark Mode\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    #         result = subprocess.run([command], capture_output=True, check=True,\n    #                                 text=True, shell=True, timeout=self.timeout, stdin=subprocess.DEVNULL)\n    #         if result.returncode == 0:\n    #             return result\n    #     except subprocess.CalledProcessError as e:\n    #         return e\n        # except subprocess.TimeoutExpired:\n        #     raise TimeoutError(f\"Command '{command}' timed out after {self.timeout} seconds.\")\n",
        "description": "Using turn_on_dark_mode() will change your system into the dark mode."
    },
    "open_document": {
        "code": "from jarvis.action.base_action import BaseAction\nfrom jarvis.atom_action.operations.media import view_office_document, play_video, play_audio, view_txt\n\nfrom jarvis.action.get_os_version import get_os_version, check_os_version\n\n\nclass open_document(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"open the target document in your offered file path.\"\n        self.system_version = get_os_version()\n        try:\n            check_os_version(self.system_version)\n        except ValueError as e:\n            print(e)\n        self.action_type = 'BASH'\n\n    def __call__(self, path: str, type: str, *args, **kwargs):\n        # \u5982\u679c\u662foffcie\u6587\u4ef6\n        if type == 'doc' or type == 'docx' or type == 'ppt' or type == 'pptx' or type == 'xls' or type == 'xlsx' or type == 'pdf':\n            view_office_document(path)\n        # \u5982\u679c\u662f\u89c6\u9891\u6587\u4ef6\n        elif type == 'avi' or type == 'mp4' or type == 'mkv':\n            play_video(path)\n        # \u5982\u679c\u662f\u97f3\u9891\u6587\u4ef6\n        elif type == 'mp3' or type == 'wav':\n            play_audio(path)\n        # \u5982\u679c\u662f\u6587\u672c\u6587\u4ef6\u6216\u8005\u5176\u5b83\u6587\u4ef6\n        else:\n            view_txt(path)\n",
        "description": "open the target document in your offered file path."
    },
    "execute_sql": {
        "code": "from jarvis.action.base_action import BaseAction\n\n\n_COMMAND = \"\"\"\nfrom jarvis.action_lib.execute_sql import execute_sql\naction = execute_sql()\naction.run(db_path='../tasks/travel/database/travel.db', query='PRAGMA table_info(railway)')\n\"\"\"\n\n\nclass execute_sql(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"Using turn_on_light_mode() will change your system into the light mode.\"\n\n    def __call__(self, query: str = 'PRAGMA table_info(railway)'):\n        if not query:\n            return \"No query, return\"\n        import sqlite3\n\n        # conn = sqlite3.connect('../../tasks/travel/database/travel.db') \u539f\u6765\n        conn = sqlite3.connect('../tasks/travel/database/travel.db') # wzm\u4fee\u6539\uff0c\u5c06\u6570\u636e\u5e93\u8def\u5f84\u6539\u4e3a\u76f8\u5bf9\u4e8e\u5de5\u4f5c\u76ee\u5f55\u7684\n        cursor = conn.cursor()\n        results = {\n            \"query\": query,\n            \"result\": None,\n            \"error\": None\n        }\n        try:\n            cursor.execute(query)\n            results['result'] = cursor.fetchall()\n        except Exception as e:\n            results['error'] = str(e)\n        conn.commit()\n        conn.close()\n\n        return results\n    # @property\n    # def _command(self):\n    #     return self._python(_COMMAND)\n\n    # def _success(self):\n    #     return \"Successfully turned the system into the Light Mode\"\n\n    # def __call__(self, *args, **kwargs):\n    #\n    #     command = 'shortcuts run \"Dark Mode\"'\n    #     try:\n    #         # result = subprocess.run([command, \"Dark Mode\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    #         result = subprocess.run([command], capture_output=True, check=True,\n    #                                 text=True, shell=True, timeout=self.timeout, stdin=subprocess.DEVNULL)\n    #         if result.returncode == 0:\n    #             return result\n    #     except subprocess.CalledProcessError as e:\n    #         return e\n        # except subprocess.TimeoutExpired:\n        #     raise TimeoutError(f\"Command '{command}' timed out after {self.timeout} seconds.\")\n\n",
        "description": "Using turn_on_light_mode() will change your system into the light mode."
    },
    "open_text_file": {
        "code": "from jarvis.action.base_action import BaseAction\nimport subprocess\nimport os\n\nclass open_text_file(BaseAction):\n    def __init__(self):\n        self._description = \"Open the specified text file in the specified folder using the default text viewer on Ubuntu.\"\n\n    def __call__(self, folder_name, file_name, working_directory=None):\n        \"\"\"\n        Open the specified text file in the specified folder using the default text viewer on Ubuntu.\n\n        Args:\n        folder_name (str): The name of the folder containing the text file.\n        file_name (str): The name of the text file to be opened.\n        working_directory (str, optional): The working directory where the folder is located. If not provided, the current working directory will be used.\n\n        Returns:\n        None\n        \"\"\"\n        # If the working directory is provided, use it. Otherwise, use the current working directory.\n        if working_directory:\n            os.chdir(working_directory)\n\n        # Construct the file path\n        file_path = os.path.join(folder_name, file_name)\n\n        # Open the text file using the default text viewer on Ubuntu\n        subprocess.run(['xdg-open', file_path])\n\n# Example of how to use the class:\n# open_file_task = open_text_file()\n# open_file_task(folder_name='myfold', file_name='result.txt', working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir')\n",
        "description": "Open the specified text file in the specified folder using the default text viewer on Ubuntu."
    },
    "retrieve_document": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport os\n\nclass retrieve_document(BaseAction):\n    def __init__(self):\n        self._description = \"Search for a txt document in the 'document' folder within the working directory, and if the document contains the word 'agent', save its full path to agent.txt.\"\n\n    def __call__(self, working_directory=None):\n        \"\"\"\n        Search for a txt document in the 'document' folder within the working directory, and if the document contains the word 'agent', save its full path to agent.txt.\n\n        Args:\n        working_directory (str): The path to the working directory. If not provided, the current working directory will be used.\n\n        Returns:\n        None\n        \"\"\"\n        # Set the working directory\n        if working_directory:\n            os.chdir(working_directory)\n        else:\n            working_directory = os.getcwd()\n\n        # Define the folder and file names\n        folder_name = \"document\"\n        search_word = \"agent\"\n        output_file = \"agent.txt\"\n\n        # Check if the document folder exists\n        if os.path.exists(folder_name) and os.path.isdir(folder_name):\n            # Iterate through the files in the document folder\n            for root, dirs, files in os.walk(folder_name):\n                for file in files:\n                    if file.endswith(\".txt\"):\n                        file_path = os.path.join(root, file)\n                        # Search for the word 'agent' in the document\n                        with open(file_path, 'r', encoding='utf-8') as f:\n                            content = f.read()\n                            if search_word in content:\n                                # Save the full path of the document to agent.txt\n                                with open(output_file, 'a', encoding='utf-8') as output:\n                                    output.write(file_path + '\\n')\n        else:\n            print(f\"The '{folder_name}' folder does not exist in the working directory.\")\n\n# Example of how to use the class:\n# retrieve = retrieve_document()\n# retrieve(working_directory=\"/home/heroding/\u684c\u9762/Jarvis/working_dir\")\n",
        "description": "Search for a txt document in the 'document' folder within the working directory, and if the document contains the word 'agent', save its full path to agent.txt."
    },
    "python_interpreter": {
        "code": "import copy\nimport io\nfrom contextlib import redirect_stdout\nfrom typing import Any, Optional\n\nfrom jarvis.action.base_action import BaseAction\nfrom jarvis.core.schema import ActionReturn\n\n\nclass GenericRuntime:\n    GLOBAL_DICT = {}\n    LOCAL_DICT = None\n    HEADERS = []\n\n    def __init__(self):\n        self._global_vars = copy.copy(self.GLOBAL_DICT)\n        self._local_vars = copy.copy(\n            self.LOCAL_DICT) if self.LOCAL_DICT else None\n\n        for c in self.HEADERS:\n            self.exec_code(c)\n\n    def exec_code(self, code_piece: str) -> None:\n        exec(code_piece, self._global_vars)\n\n    def eval_code(self, expr: str) -> Any:\n        return eval(expr, self._global_vars)\n\n\nDEFAULT_DESCRIPTION = \"\"\"\u7528\u6765\u6267\u884cPython\u4ee3\u7801\u3002\u4ee3\u7801\u5fc5\u987b\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\n\u51fd\u6570\u540d\u5fc5\u987b\u5f97\u662f 'solution'\uff0c\u4ee3\u7801\u5bf9\u5e94\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002\u4ee3\u7801\u5b9e\u4f8b\u683c\u5f0f\u5982\u4e0b\uff1a\n```python\n# import \u4f9d\u8d56\u5305\nimport time\ndef solution():\n    # \u521d\u59cb\u5316\u4e00\u4e9b\u53d8\u91cf\n    print(\"hello world!\")\n    # \u6b65\u9aa4\u4e00\n    #mid_variable = func(variable_names_with_real_meaning)\n    # \u6b65\u9aa4 x\n    #mid_variable = func(mid_variable)\n    # \u6700\u540e\u7ed3\u679c\n    #final_answer =  func(mid_variable)\n    return \"return!\"\n```\"\"\"\n\n\nclass python_interpreter(BaseAction):\n    \"\"\"A Python executor that can execute Python scripts.\n\n    Args:\n        description (str): The description of the action. Defaults to\n            DEFAULT_DESCRIPTION.\n        answer_symbol (str, Optional): the answer symbol from LLM\n        answer_expr (str, Optional): the answer function name of the Python\n            script. Default to 'solution()'.\n        answer_from_stdout (boolean): whether the execution results is from\n            stdout.\n        name (str, optional): The name of the action. If None, the name will\n            be class nameDefaults to None.\n        timeout (int): Upper bound of waiting time for Python script execution.\n    \"\"\"\n\n    def __init__(self,\n                 description: str = DEFAULT_DESCRIPTION,\n                 answer_symbol: Optional[str] = None,\n                 answer_expr: Optional[str] = 'solution()',\n                 answer_from_stdout: bool = False,\n                 name: Optional[str] = None,\n                 timeout: int = 20) -> None:\n        super().__init__(description, name, timeout)\n\n        self.answer_symbol = answer_symbol\n        self.answer_expr = answer_expr\n        self.answer_from_stdout = answer_from_stdout\n\n    def __call__(self, command: str) -> ActionReturn:\n        self.runtime = GenericRuntime()\n        self._call(command)\n\n    def _call(self, command: str) -> ActionReturn:\n        tool_return = ActionReturn(url=None, args=None, type=self.name)\n        try:\n            if '```python' in command:\n                command = command.split('```python')[1].split('```')[0]\n            elif '```' in command:\n                command = command.split('```')[1].split('```')[0]\n            tool_return.args = dict(text='```python\\n' + command + '\\n```')\n            command = command.split('\\n')\n\n            if self.answer_from_stdout:\n                program_io = io.StringIO()\n                with redirect_stdout(program_io):\n                    self.runtime.exec_code('\\n'.join(command))\n                program_io.seek(0)\n                res = program_io.readlines()[-1]\n            elif self.answer_symbol:\n                self.runtime.exec_code('\\n'.join(command))\n                res = self.runtime._global_vars[self.answer_symbol]\n            elif self.answer_expr:\n                self.runtime.exec_code('\\n'.join(command))\n                res = self.runtime.eval_code(self.answer_expr)\n            else:\n                self.runtime.exec_code('\\n'.join(command[:-1]))\n                res = self.runtime.eval_code(command[-1])\n        except Exception as e:\n            tool_return.errmsg = repr(e)\n            tool_return.type = self.name\n            # tool_return.state = ActionStatusCode.API_ERROR\n            return tool_return\n        try:\n            tool_return.result = dict(text=str(res))\n            # tool_return.state = ActionStatusCode.SUCCESS\n        except Exception as e:\n            tool_return.errmsg = repr(e)\n            tool_return.type = self.name\n            # tool_return.state = ActionStatusCode.API_ERROR\n        return tool_return\n",
        "description": "\u7528\u6765\u6267\u884cPython\u4ee3\u7801\u3002\u4ee3\u7801\u5fc5\u987b\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\n\u51fd\u6570\u540d\u5fc5\u987b\u5f97\u662f 'solution'\uff0c\u4ee3\u7801\u5bf9\u5e94\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3002\u4ee3\u7801\u5b9e\u4f8b\u683c\u5f0f\u5982\u4e0b\uff1a\n```python\n# import \u4f9d\u8d56\u5305\nimport time\ndef solution():\n    # \u521d\u59cb\u5316\u4e00\u4e9b\u53d8\u91cf\n    print(\"hello world!\")\n    # \u6b65\u9aa4\u4e00\n    #mid_variable = func(variable_names_with_real_meaning)\n    # \u6b65\u9aa4 x\n    #mid_variable = func(mid_variable)\n    # \u6700\u540e\u7ed3\u679c\n    #final_answer =  func(mid_variable)\n    return \"return!\"\n```"
    },
    "view_cpu_usage": {
        "code": "from jarvis.action.base_action import BaseAction\nimport subprocess\n\nclass view_cpu_usage(BaseAction):\n    def __init__(self):\n        self._description = \"Open the terminal interface and view the system's CPU usage.\"\n\n    def __call__(self, working_directory=None, *args, **kwargs):\n        \"\"\"\n        Open the terminal interface and view the system's CPU usage.\n\n        Args:\n        working_directory (str): The working directory where the terminal will be opened. If not provided, the current working directory will be used.\n\n        Returns:\n        None\n        \"\"\"\n        try:\n            # Set the working directory\n            if working_directory:\n                subprocess.run([\"gnome-terminal\", \"--working-directory\", working_directory, \"--\", \"top\"])\n            else:\n                subprocess.run([\"gnome-terminal\", \"--\", \"top\"])\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n",
        "description": "Open the terminal interface and view the system's CPU usage."
    },
    "set_20_minute_alarm": {
        "code": "from jarvis.action.base_action import BaseAction\n# from jarvis.atom_action.operations.system import terminal_show_file_content\n# import requests\nimport subprocess\nimport datetime\n\n\nclass set_20_minute_alarm(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"set 20 minute alarm\"\n        self.action_type = 'Python'\n\n    def __call__(self) -> None:\n        # Sets an alarm for 20 minutes from now using AppleScript\n        # The script creates a new reminder with an alert\n        current_time = datetime.datetime.now()\n        alarm_time = current_time + datetime.timedelta(minutes=20)\n        alarm_time_str = alarm_time.strftime('%Y-%m-%d %H:%M:%S')\n\n        applescript = f\"\"\"\n        tell application \"Reminders\"\n            set newReminder to make new reminder\n            tell newReminder\n                set name to \"20 Minute Alarm\"\n                set remind me date to date \"{alarm_time_str}\"\n            end tell\n        end tell\n        \"\"\"\n        subprocess.run([\"osascript\", \"-e\", applescript])\n\n# def set_20_minute_alarm():\n#     # Sets an alarm for 20 minutes from now using AppleScript\n#     # The script creates a new reminder with an alert\n#     current_time = datetime.datetime.now()\n#     alarm_time = current_time + datetime.timedelta(minutes=20)\n#     alarm_time_str = alarm_time.strftime('%Y-%m-%d %H:%M:%S')\n\n#     applescript = f\"\"\"\n#     tell application \"Reminders\"\n#         set newReminder to make new reminder\n#         tell newReminder\n#             set name to \"20 Minute Alarm\"\n#             set remind me date to date \"{alarm_time_str}\"\n#         end tell\n#     end tell\n#     \"\"\"\n#     subprocess.run([\"osascript\", \"-e\", applescript])\n\n# set_20_minute_alarm()\n",
        "description": "set 20 minute alarm"
    },
    "turn_on_light_mode": {
        "code": "from jarvis.action.base_action import BaseAction\n\n\nclass turn_on_light_mode(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"Using turn_on_light_mode() will change your system into the light mode.\"\n\n    def __call__(self, *args, **kwargs):\n        return 'shortcuts run \"Light Mode\"'\n\n    # @property\n    # def _command(self):\n    #     return 'shortcuts run \"Light Mode\"'\n        # return self._python(\n        #     self._import(\"atom\", \"operations\"),\n        #     \"adjust_theme('Adwaita')\"\n        # )\n\n    # def _success(self):\n    #     return \"Successfully turned the system into the Light Mode\"\n\n    # def __call__(self, *args, **kwargs):\n    #\n    #     command = 'shortcuts run \"Dark Mode\"'\n    #     try:\n    #         # result = subprocess.run([command, \"Dark Mode\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    #         result = subprocess.run([command], capture_output=True, check=True,\n    #                                 text=True, shell=True, timeout=self.timeout, stdin=subprocess.DEVNULL)\n    #         if result.returncode == 0:\n    #             return result\n    #     except subprocess.CalledProcessError as e:\n    #         return e\n        # except subprocess.TimeoutExpired:\n        #     raise TimeoutError(f\"Command '{command}' timed out after {self.timeout} seconds.\")\n",
        "description": "Using turn_on_light_mode() will change your system into the light mode."
    },
    "create_folder": {
        "code": "from jarvis.action.base_action import BaseAction\nimport os\n\nclass create_folder(BaseAction):\n    def __init__(self):\n        self._description = \"Create a folder under the default working directory.\"\n\n    def __call__(self, working_directory=None, folder_name='myfold', *args, **kwargs):\n        \"\"\"\n        Create a folder under the specified working directory or the default working directory.\n\n        Args:\n        working_directory (str): The path of the working directory. If not provided, the default working directory will be used.\n        folder_name (str): The name of the folder to be created. Default is 'myfold'.\n\n        Returns:\n        None\n        \"\"\"\n        # Check if the working_directory is provided, if not, use the default working directory\n        if working_directory:\n            os.chdir(working_directory)\n\n        # Create the folder\n        os.makedirs(folder_name)\n\n# Example of how to use the class\n# create_folder_action = create_folder()\n# create_folder_action(working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir', folder_name='my_new_folder')\n",
        "description": "Create a folder under the default working directory."
    },
    "install_package": {
        "code": "from jarvis.action.base_action import BaseAction\nimport subprocess\nimport sys\n\n\nclass install_package(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"install environment missing package.\"\n        self.action_type = 'BASH'\n\n    def __call__(self, package: str, *args, **kwargs):\n\n        \"\"\"\n        Install a Python package using pip.\n\n        Args:\n        package_name (str): Name of the package to install.\n        \"\"\"\n        try:\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n            print(f\"Package '{package}' installed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install package '{package}'. Error: {e}\")\n        \n        # try:\n        #     # \u68c0\u67e5pip\u662f\u5426\u5df2\u5b89\u88c5\n        #     print(\"check pip ...\")\n        #     subprocess.check_call([sys.executable, '-m', 'pip', '--version'])\n        # except subprocess.CalledProcessError:\n        #     # \u5b89\u88c5pip\n        #     print(\"Installing pip...\")\n        #     subprocess.check_call([sys.executable, '-m', 'ensurepip'])\n\n        # # \u5b89\u88c5\u6307\u5b9a\u7684\u5305\n        # try:\n        #     print(f\"Installing {package}...\")\n        #     subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n        #     print(f\"{package} installed successfully.\")\n        # except subprocess.CalledProcessError:\n        #     print(f\"Failed to install {package}.\")        \n\n",
        "description": "install environment missing package."
    },
    "create_text_file_and_write_something": {
        "code": "from jarvis.action.base_action import BaseAction\nimport os\n\nclass create_text_file_and_write_something(BaseAction):\n    def __init__(self):\n        self._description = \"Create a text file and write something in it.\"\n\n    def __call__(self, working_directory, folder_name, file_name, content):\n        \"\"\"\n        Create a text file and write something in it.\n\n        Args:\n        working_directory (str): The working directory where the folder and file will be created.\n        folder_name (str): The name of the folder where the file will be created.\n        file_name (str): The name of the text file to be created.\n        content (str): The content to be written in the text file.\n\n        Returns:\n        None\n        \"\"\"\n        # Change the current working directory to the specified working directory\n        os.chdir(working_directory)\n\n        # Create the folder if it doesn't exist\n        folder_path = os.path.join(working_directory, folder_name)\n        if not os.path.exists(folder_path):\n            os.makedirs(folder_path)\n\n        # Create and write to the text file\n        file_path = os.path.join(folder_path, file_name)\n        with open(file_path, 'w') as file:\n            file.write(content)\n\n# Example of how to use the class\n# create_text_file_and_write_something_instance = create_text_file_and_write_something()\n# create_text_file_and_write_something_instance(working_directory='/home/heroding/\u684c\u9762/Jarvis/working_dir', folder_name='myfold', file_name='result.txt', content='hello world')\n",
        "description": "Create a text file and write something in it."
    },
    "organize_app_layout": {
        "code": "from jarvis.action.base_action import BaseAction\n\n\nclass organize_app_layout(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"Using organize_app_layout() will help user reorganize their Desktop layout for better working condition and focus more easily.\"\n        self._timeout = 15\n\n    def __call__(self, *args, **kwargs):\n        return 'shortcuts run \"Organize APP Layout\"'\n\n    # @property\n    # def _command(self) -> str:\n    #     return 'shortcuts run \"Organize APP Layout\"'\n    #\n    # def _success(self) -> str:\n    #     return \"Successfully organized the app's layout\"\n",
        "description": "Using organize_app_layout() will help user reorganize their Desktop layout for better working condition and focus more easily."
    },
    "organize_document": {
        "code": "\nfrom jarvis.action.base_action import BaseAction\nimport os\nimport shutil\n\nclass organize_document(BaseAction):\n    def __init__(self):\n        self._description = \"This class organizes the retrieved files into a folder named agent, with the file paths listed in the agent.txt file.\"\n\n    def __call__(self, working_directory, agent_txt_path):\n        \"\"\"\n        Args:\n        working_directory (str): The working directory where the retrieved files and agent.txt file are located.\n        agent_txt_path (str): The path to the agent.txt file containing the paths of the retrieved files.\n        Returns:\n        None\n        \"\"\"\n        # Change the current working directory to the specified working directory\n        os.chdir(working_directory)\n\n        # Create the folder named agent if it does not exist\n        agent_folder_path = os.path.join(working_directory, 'agent')\n        if not os.path.exists(agent_folder_path):\n            os.makedirs(agent_folder_path)\n\n        # Read the agent.txt file to retrieve the file paths\n        with open(agent_txt_path, 'r', encoding='utf-8') as file:\n            file_paths = file.read().splitlines()\n\n        # Move the retrieved files to the agent folder\n        for file_path in file_paths:\n            file_name = os.path.basename(file_path)\n            destination_path = os.path.join(agent_folder_path, file_name)\n            shutil.move(file_path, destination_path)\n",
        "description": "This class organizes the retrieved files into a folder named agent, with the file paths listed in the agent.txt file."
    },
    "enable_do_not_disturb": {
        "code": "from jarvis.action.base_action import BaseAction\n# from jarvis.atom_action.operations.system import terminal_show_file_content\n# import requests\nimport subprocess\n\n\nclass enable_do_not_disturb(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"enable do not disturb mode\"\n        self.action_type = 'Python'\n\n    def __call__(self) -> None:\n        # This function uses AppleScript to enable Do Not Disturb mode on a Mac.\n        applescript = f\"\"\"\n        tell application \"Shortcuts Events\"\n            run shortcut \"enable_do_not_disturb\"\n        end tell\n        \"\"\"\n        subprocess.run([\"osascript\", \"-e\", applescript])\n",
        "description": "enable do not disturb mode"
    },
    "open_picture": {
        "code": "from jarvis.action.base_action import BaseAction\n\n\nclass open_picture(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"Using open_picture() will open the picture you want.\"\n        self.action_type = 'BASH'\n\n    def __call__(self, *args, **kwargs):\n        return 'shortcuts run \"open_picture\"'\n",
        "description": "Using open_picture() will open the picture you want."
    },
    "zip_files": {
        "code": "from jarvis.action.base_action import BaseAction\nimport os\nimport zipfile\n\nclass zip_files(BaseAction):\n    def __init__(self):\n        self._description = \"Zip all the files in the specified folder\"\n\n    def __call__(self, folder_name):\n        \"\"\"\n        Zip all the files in the specified folder and name the zip file as the folder name.\n\n        Args:\n        folder_name (str): The name of the folder containing the files to be zipped.\n\n        Returns:\n        None\n        \"\"\"\n        try:\n            # Get the current working directory\n            current_dir = os.getcwd()\n\n            # Change the current working directory to the specified folder\n            os.chdir(folder_name)\n\n            # Get the list of files in the folder\n            file_list = os.listdir()\n\n            # Create a zip file with the folder name\n            with zipfile.ZipFile(f\"{folder_name}.zip\", \"w\") as zipf:\n                # Add each file in the folder to the zip file\n                for file in file_list:\n                    zipf.write(file)\n\n        except FileNotFoundError as e:\n            print(f\"Error: {e}\")\n\n        finally:\n            # Change the working directory back to the original directory\n            os.chdir(current_dir)\n",
        "description": "Zip all the files in the specified folder"
    },
    "check_weather": {
        "code": "from jarvis.action.base_action import BaseAction\nfrom jarvis.atom_action.operations.system import terminal_show_file_content\nimport requests\nimport tempfile\n\nclass check_weather(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"check the weather of the target place\"\n        self.action_type = 'BASH'\n\n    def __call__(self, *places) -> None:\n        # \u4f8b\u5b50curl wttr.in/anhui?m\n        placeStr = \"\"\n        if(len(places) > 1):\n            placeStr = \"+\".join(places[::-1])\n        elif(len(places) == 1):\n            placeStr = places[0]\n        weather_api = \"http://wttr.in/{place}?m?\".format(place=placeStr)\n        response = requests.get(weather_api)\n        res = \"\u6682\u65e0\u5929\u6c14\u6570\u636e\"\n        if(response != None):\n            res = response.text\n        terminal_show_file_content\n        with tempfile.NamedTemporaryFile('w', delete=True) as temp:\n            temp.write(res)\n            temp.flush()\n            terminal_show_file_content(temp.name)\n\n\n\n\n",
        "description": "check the weather of the target place"
    },
    "play_light_music": {
        "code": "from jarvis.action.base_action import BaseAction\n# from jarvis.atom_action.operations.system import terminal_show_file_content\n# import requests\nimport subprocess\n\n\nclass play_light_music(BaseAction):\n    def __init__(self) -> None:\n        super().__init__()\n        self._description = \"play light music\"\n        self.action_type = 'Python'\n\n    def __call__(self) -> None:\n        # This function uses AppleScript to enable Do Not Disturb mode on a Mac.\n        applescript = \"\"\"\n        tell application \"Music\"\n            play playlist \"light music\"\n        end tell\n        \"\"\"\n        subprocess.run([\"osascript\", \"-e\", applescript])\n\n\n# def play_light_music():\n#     # Plays a playlist named \"light music\" in iTunes or Music app\n#     applescript = \"\"\"\n#     tell application \"Music\"\n#         play playlist \"light music\"\n#     end tell\n#     \"\"\"\n#     subprocess.run([\"osascript\", \"-e\", applescript])\n\n# play_light_music()\n",
        "description": "play light music"
    }
}